package app.project2.southnationalpark;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.os.StrictMode;
import android.util.Log;
import android.widget.TextView;

public class Topography extends Activity {
	@SuppressLint("NewApi")
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.test);
		
		 if (android.os.Build.VERSION.SDK_INT > 9) {
	            StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
	            StrictMode.setThreadPolicy(policy);
	        }
		  showInfo();
		  // btnBack
	
	      
	}
	 public void showInfo()
	    {
	    	// txtMemberID,txtMemberID,txtUsername,txtPassword,txtName,txtEmail,txtTel
	    	final TextView topography = (TextView)findViewById(R.id.txt_topography);
	    	final TextView general = (TextView)findViewById(R.id.txt_general);
	    	final TextView parkname = (TextView)findViewById(R.id.txt_parkname);

	    	
	    	String url = "http://10.0.3.2/SouthNationalParkTravel/getTopography.php";
	    	
	    	Intent intent= getIntent();
	    	final String id = intent.getStringExtra("pid"); 

			List<NameValuePair> params = new ArrayList<NameValuePair>();
	        params.add(new BasicNameValuePair("topographyID", id));

	    	String resultServer  = getHttpPost(url,params);
	  	 
	    	String strTopography = "";

	    	
	    	JSONObject c;
			try {
				c = new JSONObject(resultServer);
				strTopography = c.getString("topography");
	
				
				if(!strTopography.equals(""))
				{
					topography.setText(strTopography);

				}
				else
				{
					topography.setText("-");
	
				}
	        	
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
	    }
	    
		public String getHttpPost(String url,List<NameValuePair> params) {
			StringBuilder str = new StringBuilder();
			HttpClient client = new DefaultHttpClient();
			HttpPost httpPost = new HttpPost(url);
			
			try {
				httpPost.setEntity(new UrlEncodedFormEntity(params));
				HttpResponse response = client.execute(httpPost);
				StatusLine statusLine = response.getStatusLine();
				int statusCode = statusLine.getStatusCode();
				if (statusCode == 200) { // Status OK
					HttpEntity entity = response.getEntity();
					InputStream content = entity.getContent();
					BufferedReader reader = new BufferedReader(new InputStreamReader(content));
					String line;
					while ((line = reader.readLine()) != null) {
						str.append(line);
					}
				} else {
					Log.e("Log", "Failed to download result..");
				}
			} catch (ClientProtocolException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str.toString();
			
		}
}
